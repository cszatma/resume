{"version":3,"sources":["fonts/OpenSans-Bold.ttf","fonts/OpenSans-Regular.ttf","serviceWorker.ts","components/SectionItem.tsx","sections/Experience.tsx","Resume.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","styles","StyleSheet","create","container","marginBottom","headerContainer","flexDirection","leftColumn","flexGrow","rightColumn","titleContainer","title","fontWeight","description","SectionItem","props","style","secondaryTitle","date","flex","fontSize","itemContainer","items","Experience","map","item","key","page","backgroundColor","fontFamily","section","margin","padding","Resume","size","Font","register","family","fonts","src","openSansBold","openSans","render","width","height","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qFAAAA,EAAOC,QAAU,IAA0B,2C,oBCA3CD,EAAOC,QAAU,IAA0B,8C,iOCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCfN,IAAMC,EAASC,IAAWC,OAAO,CAC/BC,UAAW,CACTC,aAAc,GAEhBC,gBAAiB,CACfC,cAAe,OAEjBC,WAAY,CACVD,cAAe,SACfE,SAAU,GAEZC,YAAa,CAEXD,SAAU,EAMVF,cAAe,kBAGjBI,eAAgB,CACdJ,cAAe,OAEjBK,MAAO,CACLC,WAAY,QAEdC,YAAa,KA6BAC,EAnB+B,SAAAC,GAAK,OACjD,kBAAC,IAAD,CAAMC,MAAOhB,EAAOG,WAClB,kBAAC,IAAD,CAAMa,MAAOhB,EAAOK,iBAClB,kBAAC,IAAD,CAAMW,MAAOhB,EAAOO,YAClB,kBAAC,IAAD,CAAMS,MAAOhB,EAAOU,gBAClB,kBAAC,IAAD,CAAMM,MAAOhB,EAAOW,OAApB,UAA+BI,EAAMJ,MAArC,MACA,kBAAC,IAAD,sBAAYI,EAAME,mBAGtB,kBAAC,IAAD,CAAMD,MAAOhB,EAAOS,aAClB,kBAAC,IAAD,KAAOM,EAAMG,QAGjB,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAOH,EAAMF,gBClDbb,EAASC,IAAWC,OAAO,CAC/BC,UAAW,CACTgB,KAAM,EACNb,cAAe,MACfc,SAAU,IAEZC,cAAe,CACbjB,aAAc,GAEhBM,eAAgB,CACdJ,cAAe,YAIbgB,EAAQ,CACZ,CACEX,MAAO,YACPM,eAAgB,cAChBC,KAAM,iCACNL,YACE,oMAEJ,CACEF,MAAO,sCACPM,eAAgB,cAChBC,KAAM,yBACNL,YACE,4SAuBSU,EAnBuB,kBACpC,kBAAC,IAAD,CAAMP,MAAOhB,EAAOG,WAClB,kBAAC,IAAD,CAAMa,MAAOhB,EAAOU,gBAClB,kBAAC,IAAD,oBAEF,kBAAC,IAAD,KACGY,EAAME,KAAI,SAAAC,GAAI,OACb,kBAAC,EAAD,CACEC,IAAKD,EAAKd,MAAQc,EAAKR,eACvBN,MAAOc,EAAKd,MACZM,eAAgBQ,EAAKR,eACrBC,KAAMO,EAAKP,KACXL,YAAaY,EAAKZ,oBC3CtBb,EAASC,IAAWC,OAAO,CAC/ByB,KAAM,CACJrB,cAAe,MACfsB,gBAAiB,UACjBC,WAAY,aAEdC,QAAS,CACPC,OAAQ,GACRC,QAAS,GACTxB,SAAU,KAkBCyB,EAdmB,kBAChC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMC,KAAK,QAAQlB,MAAOhB,EAAO2B,MAO/B,kBAAC,EAAD,S,oCCjBNQ,IAAKC,SAAS,CACZC,OAAQ,YACRC,MAAO,CAAC,CAAEC,IAAKC,IAAc5B,WAAY,QAAU,CAAE2B,IAAKE,QAS5DC,iBAAO,mBANK,kBACV,kBAAC,IAAD,CAAW1B,MAAO,CAAE2B,MAAO,QAASC,OAAQ,UAC1C,kBAAC,EAAD,SAIG,MAASC,SAASC,eAAe,SJoHlC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c200ff5d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/OpenSans-Bold.1025a6e0.ttf\";","module.exports = __webpack_public_path__ + \"static/media/OpenSans-Regular.3ed9575d.ttf\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const publicUrl = new URL(process.env.PUBLIC_URL!, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { FunctionComponent } from 'react';\nimport { StyleSheet, Text, View } from '@react-pdf/renderer';\n\nconst styles = StyleSheet.create({\n  container: {\n    marginBottom: 5,\n  },\n  headerContainer: {\n    flexDirection: 'row',\n  },\n  leftColumn: {\n    flexDirection: 'column',\n    flexGrow: 9,\n  },\n  rightColumn: {\n    // flexDirection: 'column',\n    flexGrow: 1,\n    // alignItems: 'flex-end',\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    // justifySelf: 'flex-end',\n    // justifyContent: 'flex-end',\n    flexDirection: 'column-reverse',\n    // justifyContent: 'center'\n  },\n  titleContainer: {\n    flexDirection: 'row',\n  },\n  title: {\n    fontWeight: 'bold',\n  },\n  description: {},\n});\n\ninterface Props {\n  title: string;\n  secondaryTitle: string;\n  date: string;\n  description: string;\n}\n\nconst SectionItem: FunctionComponent<Props> = props => (\n  <View style={styles.container}>\n    <View style={styles.headerContainer}>\n      <View style={styles.leftColumn}>\n        <View style={styles.titleContainer}>\n          <Text style={styles.title}>{`${props.title} `}</Text>\n          <Text>{`â€“ ${props.secondaryTitle}`}</Text>\n        </View>\n      </View>\n      <View style={styles.rightColumn}>\n        <Text>{props.date}</Text>\n      </View>\n    </View>\n    <View>\n      <Text>{props.description}</Text>\n    </View>\n  </View>\n);\n\nexport default SectionItem;\n","import React, { FunctionComponent } from 'react';\nimport { StyleSheet, Text, View } from '@react-pdf/renderer';\n\nimport SectionItem from '../components/SectionItem';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    fontSize: 12,\n  },\n  itemContainer: {\n    marginBottom: 5,\n  },\n  titleContainer: {\n    flexDirection: 'column',\n  },\n});\n\nconst items = [\n  {\n    title: 'Developer',\n    secondaryTitle: 'Orange Gate',\n    date: 'September 2018 - November 2018',\n    description:\n      'Developed applications for robots in the Development Studio using Java, Kotlin and Android Studio. Helped create and implement development processes. Trained team on how to use Git and Github.',\n  },\n  {\n    title: 'Computer Science Research Associate',\n    secondaryTitle: 'Orange Gate',\n    date: 'May 2018 - August 2018',\n    description:\n      'Developed chatbot prototypes using Microsoft Azure and Amazon Lex to explore potential use cases. Implemented processes in the Innovation Lab to improve project planning and documentation. Developed a web application using React that generates backgrounds for videos to assist the Design Studio.',\n  },\n];\n\nconst Experience: FunctionComponent = () => (\n  <View style={styles.container}>\n    <View style={styles.titleContainer}>\n      <Text>EXPERIENCE</Text>\n    </View>\n    <View>\n      {items.map(item => (\n        <SectionItem\n          key={item.title + item.secondaryTitle}\n          title={item.title}\n          secondaryTitle={item.secondaryTitle}\n          date={item.date}\n          description={item.description}\n        />\n      ))}\n    </View>\n  </View>\n);\n\nexport default Experience;\n","import React, { FunctionComponent } from 'react';\nimport { Page, Text, View, Document, StyleSheet } from '@react-pdf/renderer';\n\nimport Experience from './sections/Experience';\n\nconst styles = StyleSheet.create({\n  page: {\n    flexDirection: 'row',\n    backgroundColor: '#FFFFFF',\n    fontFamily: 'Open Sans',\n  },\n  section: {\n    margin: 10,\n    padding: 10,\n    flexGrow: 1,\n  },\n});\n\nconst Resume: FunctionComponent = () => (\n  <Document>\n    <Page size=\"LEGAL\" style={styles.page}>\n      {/* <View style={styles.section}>\n        <Text>Section #1</Text>\n      </View>\n      <View style={styles.section}>\n        <Text>Section #2</Text>\n      </View> */}\n      <Experience />\n    </Page>\n  </Document>\n);\n\nexport default Resume;\n","import React from 'react';\nimport { render } from 'react-snapshot';\nimport { Font, PDFViewer } from '@react-pdf/renderer';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Resume from './Resume';\nimport openSansBold from './fonts/OpenSans-Bold.ttf';\nimport openSans from './fonts/OpenSans-Regular.ttf';\n\nFont.register({\n  family: 'Open Sans',\n  fonts: [{ src: openSansBold, fontWeight: 'bold' }, { src: openSans }],\n});\n\nconst App = () => (\n  <PDFViewer style={{ width: '100vw', height: '100vh' }}>\n    <Resume />\n  </PDFViewer>\n);\n\nrender(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}